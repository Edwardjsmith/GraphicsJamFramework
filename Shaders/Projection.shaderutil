#include Triangle

uniform mat4 ProjectionViewModel;

uniform vec3 cameraPos;

uniform int screenWidth = 640;
uniform int screenHeight = 480;

float halfScreenHeight = screenHeight * 0.5f;
float halfScreenWidth = screenWidth * 0.5f;

struct VertexData
{
	vec4 pos;
	vec4 norm;
	vec2 UV;
};

struct TriangleData
{
	int TriangleVertIndex[4];
};

struct PixelData
{
	vec4 PixelPos;
	vec4 PixelNormal;
	vec2 PixelUV;
	int bPainted;
};

mat3 identity =
{
	{1.0f, 0.0f, 0.0f },
	{0.0f, 1.0f, 0.0f },
	{0.0f, 0.0f, 1.0f },
};

vec4 ToRaster(in vec4 NDC)
{
	return vec4(((NDC.x + NDC.w) * 0.5f) * screenWidth, ((NDC.w - NDC.y) * 0.5f) * screenHeight, NDC.z, NDC.w);
}

vec3 ToRaster2D(in vec3 NDC)
{
	return vec3(((NDC.x + 1.0f) * 0.5f) * screenWidth, ((NDC.y + 1.0f) * 0.5f) * screenHeight, NDC.z);
}

float Determinant3X3(in mat3 mat)
{
	return (mat[0].x * mat[1].y * mat[2].z) + (mat[1].x * mat[2].y * mat[0].z) + (mat[2].x * mat[0].y * mat[1].z)
		- (mat[2].x * mat[1].y * mat[0].z) - (mat[1].x * mat[0].y * mat[2].z) - (mat[0].x * mat[2].y * mat[1].z);
}
