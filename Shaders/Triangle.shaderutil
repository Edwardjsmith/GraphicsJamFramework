struct Triangle
{
	vec3 vertices[3];
	vec2 boxCoords[4];
};

void BuildTriangle(inout Triangle triangle, in vec3 left, in vec3 right, in vec3 top)
{
	triangle.vertices[0] = left;
	triangle.vertices[1] = right;
	triangle.vertices[2] = top;
}

bool EvaluateEdgeFunction(in vec3 E, in vec2 samp)
{
	// Interpolate edge function at given sample
	return ((E.x * samp.x) + (E.y * samp.y) + E.z) > 0.0f;
}

bool PixelInsideTriangle(in vec3 left, in vec3 right, in vec3 top, in vec3 pixelCoords)
{
	return EvaluateEdgeFunction(left, pixelCoords.xy) && EvaluateEdgeFunction(right, pixelCoords.xy) && EvaluateEdgeFunction(top, pixelCoords.xy);
}

vec3 vertices[] =
{
	{ 1.0f, -1.0f, -1.0f },
	{ 1.0f, -1.0f, 1.0f },
	{ -1.0f, -1.0f, 1.0f },
	{ -1.0f, -1.0f, -1.0f },
	{ 1.0f, 1.0f, -1.0f },
	{  1.0f, 1.0f, 1.0f },
	{ -1.0f, 1.0f, 1.0f },
	{ -1.0f, 1.0f, -1.0f },
};

uint indices[] =
{
	1,3,0, 7,5,4, 4,1,0, 5,2,1, 2,7,3, 0,7,4, 1,2,3, 7,6,5, 4,5,1, 5,6,2, 2,6,7, 0,3,7
};